
 ______  ____    ____        ______                                   _
/\  _  \/\  _`\ /\  _`\     /\__  _\                                /' \
\ \ \L\ \ \,\L\_\ \ \/\_\   \/_/\ \/    __    ___ ___      __      /\_, \
 \ \  __ \/_\__ \\ \ \/_/_     \ \ \  /'__`\/' __` __`\  /'__`\    \/_/\ \
  \ \ \/\ \/\ \L\ \ \ \L\ \     \ \ \/\  __//\ \/\ \/\ \/\ \L\.\_     \ \ \
   \ \_\ \_\ `\____\ \____/      \ \_\ \____\ \_\ \_\ \_\ \__/.\_\     \ \_\
    \/_/\/_/\/_____/\/___/        \/_/\/____/\/_/\/_/\/_/\/__/\/_/      \/_/

---------------------  Arhitectura sistemelor de calcul -----------------------

Tema 1 : Crowdsensing
Nume : Niculescu
Prenume : Mihai Alexandru
Grupa : 335CB
Sistem de operare : Ubuntu 18.04 LTS 64bit
Editor : PyCharm
Fisiere : device.py barrier.py threadpool.py README

--------------------------------------------------------------------------------

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Structura Temei  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

    In modulul barrier.py se gaseste bariera implementata de echipa de la ASC
pentru lab-ul 3. In modulul threadpool.py am un thread pool, folosind modelul
producator - consumator, utilizand o coda, Queue din modulul Queue, acesta fiind
sincronizata.

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<    Implementare   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

    Pentru a sincroniza toate device-urile sa termine un timepoint in acelasi
timp am utilizat o bariera reutilizabila din laboratorul 3, e va permite
device-urilor sa treaca dupa ce termina toate. Ca sa fac accesul la date pentru
o locatie sigur si sa existe "consistența secvențială", o sa existe un lock
pentru fiecare locatie pentru care cel putin un device detine date, restul
locatilor nu ma interseaza, asta va permite doar unui device sa prelucreza datele
pentru o locatie. Cum toate device-urile trebui sa aiba aceiasi bariera si acelasi
dictionar de (location, lock), aceste sunt create si initializate de device-ul cu
id-ul egal cu 0, apoi adaugate pentru celelate device-uri.
    Pentru a execta mai multe scripturi in acelasi timp per device, am
implementat un planificator, care sa distribui celor 8 thread-uri cate un script
de rulat. Modelul este producator - consumator, folosind Queue, un worker
asteapta sa primeasca un script, apoi face lock pentru locatia respectiva,
colecteaza datele de la toate device-urile care sunt "vecini", apoi ruleaza scritul
, daca exista date, si reinnoieste valorile pentru device-urile repective. La final
semnalizeza ca a terminta de excuta un task. Pentru a semaliza unui worker ca sa
terminat executia programului se trimite (None, None). La initializare unui
threadpool sunt create cele 8 thread care urmeaza sa prelucreeze scipturile.
    Pentru a proni executia unor scripturi intr-un timepoint exista metoda :
start_work : care are ca argumente : device-urile care sunt in aceiasi locatie,
script-urile care le-a primit primit pana in cel moment, ele fiind aduagate in
coada de task-uri.Ca acest lucru sa se intample trebuie ca un device sa nu
permita primirea de script-uri pana nu a primit vecini si nu a apelat start_work,
de aceia este start, care va permite primirea de noi scripturi dupa indeplinirea
condutiilor. Cand primite un nou script este aduagat folosind metoda add_task si
salvat in script, pentru a fi folosit la urmatorul timepoint. Un device trebuie
sa astepte ca toate script-urile sa fie executate, de aceia exista join( apleaza
join din Queue), care idica ca toate scripturile a fost exutate. 
    Dupa un timepoint toate variabile de tip event sunt resetate. Cand un devie
primeste mesajul ca sa terminat de executat simuare, el apeleza end_work, acesta
metoda trimte mesajul care semalizeaza finalul programului si asteapta ca toate
cele 8 thread-uri sa termine.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<